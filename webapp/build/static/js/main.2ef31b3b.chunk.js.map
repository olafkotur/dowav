{"version":3,"sources":["context/NavigationContext.ts","constants/MenuOptionConstants.ts","components/Menu.tsx","components/views/DashboardView.tsx","components/ControlPane.tsx","d3/d3Graph.ts","components/views/Graph.tsx","data/mockdata.ts","components/views/GraphView.tsx","components/Switch.tsx","components/Dashboard.tsx","App.tsx","index.tsx"],"names":["React","createContext","currentOption","setCurrentOption","n","Error","menuOptions","name","indented","icon","size","color","Menu","useContext","NavigationContext","className","map","option","key","onClick","DashboardView","ControlPane","live","setLive","shouldRenderLive","colors","D3Graph","options","svg","viewport","margin","data","xScale","yScale","this","top","bottom","left","right","getXScale","getYScale","d3","attr","width","height","resize","on","Array","svgLocal","t","duration","ease","line","x","d","Date","time","y","avg","curve","append","call","datum","transition","selectAll","i","html","plot","domain","length","range","minmax","push","Graph","control","container","useRef","useState","d3chart","setD3chart","useEffect","el","document","getElementById","current","removeChild","childNodes","rect","getBoundingClientRect","setViewport","ref","min","max","GraphView","setSize","graphRef","updateSize","useLayoutEffect","window","addEventListener","removeEventListener","slice","zoneA","zoneB","Math","random","zoneC","Switch","component","Dashboard","App","navigation","setNavigation","Provider","value","s","ReactDOM","render"],"mappings":"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,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,mBACLiC,IAAK,mBACLC,IAAK,oBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK,mBAET,CACIpC,KAAM,cACNE,IAAK,kBACLiC,IAAK,kBACLC,IAAK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","file":"static/js/main.2ef31b3b.chunk.js","sourcesContent":["import React from 'react';\nimport { DASHBOARD } from '../constants/MenuOptionConstants';\n\ntype NavigationContext = {\n    currentOption: string;\n    setCurrentOption(option: string): void;\n};\n\nexport default React.createContext<NavigationContext>({\n    currentOption: DASHBOARD,\n    setCurrentOption: n => {\n        throw new Error('setCurrentOption() not implemented.');\n    }\n});\n","export const DASHBOARD = 'Dashboard';\nexport const TEMPERATURE = 'Temperature';\nexport const MOISTURE = 'Moisture';\nexport const LIGHT = 'Light';\nexport const MOVEMENT = 'Movement';\nexport const TWITTER = 'Twitter';\nexport const SETTINGS = 'Settings';\n","import React, { useContext } from 'react';\nimport { MdDashboard, MdSettings } from 'react-icons/md';\nimport { FaTemperatureLow, FaTwitter } from 'react-icons/fa';\nimport { IoIosWater } from 'react-icons/io';\nimport { GoPerson, GoLightBulb } from 'react-icons/go';\nimport * as MENU_OPTIONS from '../constants/MenuOptionConstants';\nimport NavigationContext from '../context/NavigationContext';\n\ninterface IMenuOption {\n    name: string;\n    indented: boolean;\n    icon: any;\n}\n\nconst iconColor = 'white';\n\nconst menuOptions: Array<IMenuOption> = [\n    {\n        name: MENU_OPTIONS.DASHBOARD,\n        indented: false,\n        icon: <MdDashboard size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.TEMPERATURE,\n        indented: true,\n        icon: <FaTemperatureLow size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.MOISTURE,\n        indented: true,\n        icon: <IoIosWater size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.LIGHT,\n        indented: true,\n        icon: <GoLightBulb size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.MOVEMENT,\n        indented: true,\n        icon: <GoPerson size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.TWITTER,\n        indented: false,\n        icon: <FaTwitter size={20} color={iconColor} />\n    },\n    {\n        name: MENU_OPTIONS.SETTINGS,\n        indented: false,\n        icon: <MdSettings size={20} color={iconColor} />\n    }\n];\n\nconst Menu: React.FC = () => {\n    const { currentOption, setCurrentOption } = useContext(NavigationContext);\n    return (\n        <div className=\"menu\">\n            {menuOptions.map((option: IMenuOption) => {\n                return (\n                    <div\n                        key={option.name}\n                        className={`item  ${\n                            option.name === currentOption ? 'selected' : ''\n                        }`}\n                        onClick={() => {\n                            setCurrentOption(option.name);\n                        }}\n                    >\n                        <div\n                            className={`icon ${\n                                option.indented ? 'indent' : ''\n                            }`}\n                        >\n                            {option.icon}\n                        </div>\n                        <div className={`text`}>{option.name}</div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst DashboardView: React.FC = () => {\n    return (\n        <div>\n            I suggest to show here the status of IoT devices.\n            <br />\n            Would be cool to have some kind of history as well.\n        </div>\n    );\n};\n\nexport default DashboardView;\n","import React from 'react';\n\ntype ControlPaneProps = {\n    shouldRenderLive: boolean;\n    live: boolean;\n    setLive(): void;\n};\n\nconst ControlPane: React.FC<ControlPaneProps> = ({\n    live,\n    setLive,\n    shouldRenderLive\n}) => {\n    return (\n        <div className=\"control-pane\">\n            {shouldRenderLive ? (\n                <button className={`${live ? 'live' : ''}`} onClick={setLive}>\n                    Live\n                </button>\n            ) : null}\n        </div>\n    );\n};\n\nexport default ControlPane;\n","import * as d3 from 'd3';\nimport {\n    IViewport,\n    IMargin,\n    IHistoryData,\n    MultipleHistoryData,\n    HistoryData\n} from '../types';\n\ntype D3GraphProps = {\n    viewport: IViewport;\n    svg: HTMLElement;\n    data: HistoryData;\n};\n\nconst colors = ['#ffa500', '#ff2929', '#7a7aed'];\n\nexport default class D3Graph {\n    private svg: HTMLElement;\n    private viewport: IViewport;\n    private margin: IMargin;\n    // TODO CHANGE ANY\n    private data: HistoryData;\n    private xScale: any;\n    private yScale: any;\n    public constructor(options: D3GraphProps) {\n        this.svg = options.svg;\n        this.viewport = options.viewport;\n        this.margin = { top: 40, bottom: 40, left: 40, right: 40 };\n        this.data = options.data;\n        this.getXScale(this.data);\n        this.getYScale(this.data);\n    }\n\n    public setViewport(viewport: IViewport) {\n        d3.select(this.svg)\n            .attr('width', viewport.width)\n            .attr('height', viewport.height);\n        this.viewport = viewport;\n        this.resize();\n    }\n\n    public plot(on?: string) {\n        if (this.data instanceof Array) {\n            let svgLocal = d3.select(this.svg);\n            let t = d3\n                .transition()\n                .duration(500)\n                .ease(d3.easeLinear);\n            let line = d3\n                .line()\n                .x((d: any) => this.xScale(new Date(d.time)))\n                .y((d: any) => this.yScale(d.avg))\n                .curve(d3.curveMonotoneX);\n\n            // x axis\n            svgLocal\n                .append('g')\n                .attr('class', 'x-axis')\n                .attr(\n                    'transform',\n                    `translate(0, ${this.viewport.height - this.margin.bottom})`\n                )\n                .call(d3.axisBottom(this.xScale));\n            // y axis\n            svgLocal\n                .append('g')\n                .attr('class', 'y-axis')\n                .attr('transform', `translate(${this.margin.left}, 0)`)\n                .call(d3.axisLeft(this.yScale));\n            //path\n            svgLocal\n                .append('path')\n                .attr('class', 'line')\n                .attr('stroke', colors[0])\n                .datum(this.data)\n                .attr('d', <any>line);\n\n            if (on === 'start') {\n                svgLocal\n                    .attr('opacity', 0)\n                    .transition(<any>t)\n                    .attr('opacity', 1);\n            }\n\n            // circles\n            svgLocal.selectAll('.dot');\n            //Dumy comment\n        } else if (typeof this.data === 'object') {\n            let svgLocal = d3.select(this.svg);\n            let line = d3\n                .line()\n                .x((d: any) => this.xScale(new Date(d.time)))\n                .y((d: any) => this.yScale(d.avg))\n                .curve(d3.curveMonotoneX);\n            let t = d3\n                .transition()\n                .duration(500)\n                .ease(d3.easeLinear);\n            // x axis\n            svgLocal\n                .append('g')\n                .attr('class', 'x-axis')\n                .attr(\n                    'transform',\n                    `translate(0, ${this.viewport.height - this.margin.bottom})`\n                )\n                .call(d3.axisBottom(this.xScale));\n            // y axis\n            svgLocal\n                .append('g')\n                .attr('class', 'y-axis')\n                .attr('transform', `translate(${this.margin.left}, 0)`)\n                .call(d3.axisLeft(this.yScale));\n\n            let i = 0;\n            for (let key in this.data) {\n                //path\n                svgLocal\n                    .append('path')\n                    .attr('class', 'line')\n                    .attr('stroke', colors[i])\n                    .datum(this.data[key])\n                    .attr('d', <any>line);\n\n                if (on === 'start') {\n                    svgLocal\n                        .attr('opacity', 0)\n                        .transition(<any>t)\n                        .attr('opacity', 1);\n                }\n                // circles\n                svgLocal.selectAll('.dot');\n                i++;\n            }\n        }\n    }\n\n    public resize() {\n        let svgLocal = d3.select(this.svg).html('');\n\n        this.getXScale(this.data);\n        this.getYScale(this.data);\n        this.plot();\n    }\n\n    private getXScale(data: HistoryData) {\n        if (data instanceof Array) {\n            this.xScale = d3\n                .scaleTime()\n                .domain([\n                    new Date(data[0].time),\n                    new Date(data[data.length - 1].time)\n                ])\n                .range([\n                    this.margin.left,\n                    this.viewport.width - this.margin.right\n                ]);\n        } else if (typeof data === 'object') {\n            let minmax = [];\n            for (let key in data) {\n                minmax.push(...d3.extent(data[key], d => d.time));\n            }\n            minmax = d3.extent(minmax as any);\n            this.xScale = d3\n                .scaleTime()\n                .domain([\n                    new Date(minmax[0] as any),\n                    new Date(minmax[1] as any)\n                ])\n                .range([\n                    this.margin.left,\n                    this.viewport.width - this.margin.right\n                ]);\n        }\n    }\n\n    private getYScale(data: HistoryData) {\n        if (data instanceof Array) {\n            this.yScale = d3\n                .scaleLinear()\n                .domain(<[number, number]>d3.extent(data, d => d.avg))\n                .range([\n                    this.viewport.height - this.margin.top,\n                    this.margin.bottom\n                ]);\n        } else if (typeof data === 'object') {\n            let minmax: (number | undefined)[] = [];\n            for (let key in data) {\n                minmax.push(...d3.extent(data[key], d => d.avg));\n            }\n            this.yScale = d3\n                .scaleLinear()\n                .domain(d3.extent(minmax as any) as any)\n                .range([\n                    this.viewport.height - this.margin.top,\n                    this.margin.bottom\n                ]);\n        }\n    }\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { IViewport, HistoryData } from '../../types';\nimport * as d3 from 'd3';\nimport ControlPane from '../ControlPane';\nimport D3Graph from '../../d3/d3Graph';\n\ntype GraphView = {\n    viewport: IViewport;\n    name: string;\n    data: HistoryData;\n    control?: {\n        shouldRenderLive: boolean;\n    };\n};\n\nconst Graph: React.FC<GraphView> = ({\n    viewport,\n    name,\n    data,\n    control = { shouldRenderLive: true }\n}) => {\n    const container = useRef<HTMLDivElement>(null);\n    const [live, setLive] = useState<boolean>(false);\n    const [d3chart, setD3chart] = useState<D3Graph | null>(null);\n\n    useEffect(() => {\n        if (d3chart) {\n            d3chart.plot('start');\n        }\n    }, [d3chart]);\n\n    useEffect(() => {\n        return () => {\n            let el = document.getElementById(name);\n            if (el && container.current) {\n                container.current.removeChild(el);\n            }\n        };\n    }, []);\n    useEffect(() => {\n        if (container.current) {\n            let el = container.current;\n            if (el.childNodes.length === 1) {\n                d3.select(el)\n                    .append('svg')\n                    .attr('id', name)\n                    .attr('width', viewport.width)\n                    .attr('height', viewport.height);\n                const svg = document.getElementById(name);\n                svg && setD3chart(new D3Graph({ svg, viewport, data }));\n            }\n        }\n    }, [container.current]);\n\n    useEffect(() => {\n        if (container.current) {\n            const svg = document.getElementById(name);\n            if (svg) {\n                const rect = svg.getBoundingClientRect();\n                if (\n                    rect.height !== viewport.height ||\n                    rect.width !== viewport.width\n                ) {\n                    if (d3chart) {\n                        d3chart.setViewport(viewport);\n                    }\n                }\n            }\n        }\n    }, [viewport]);\n\n    return (\n        <div ref={container} className={`graph ${live ? 'live' : ''}`}>\n            <ControlPane\n                shouldRenderLive={control.shouldRenderLive}\n                live={live}\n                setLive={() => setLive(!live)}\n            />\n        </div>\n    );\n};\n\nexport default Graph;\n","const data = [\n    {\n        time: 1571504077257,\n        avg: 17.810953475202226,\n        min: 15.810953475202226,\n        max: 19.810953475202226\n    },\n    {\n        time: 1571507677257,\n        avg: 18.243187283628842,\n        min: 16.243187283628842,\n        max: 20.243187283628842\n    },\n    {\n        time: 1571511277257,\n        avg: 18.86231093825219,\n        min: 16.86231093825219,\n        max: 20.86231093825219\n    },\n    {\n        time: 1571514877257,\n        avg: 20.962507644012447,\n        min: 18.962507644012447,\n        max: 22.962507644012447\n    },\n    {\n        time: 1571518477257,\n        avg: 17.839609353028276,\n        min: 15.839609353028276,\n        max: 19.839609353028276\n    },\n    {\n        time: 1571522077257,\n        avg: 17.832770342810452,\n        min: 15.832770342810452,\n        max: 19.832770342810452\n    },\n    {\n        time: 1571525677257,\n        avg: 21.242488055974984,\n        min: 19.242488055974984,\n        max: 23.242488055974984\n    },\n    {\n        time: 1571529277257,\n        avg: 18.16563426383551,\n        min: 16.16563426383551,\n        max: 20.16563426383551\n    },\n    {\n        time: 1571532877257,\n        avg: 21.683711559839363,\n        min: 19.683711559839363,\n        max: 23.683711559839363\n    },\n    {\n        time: 1571536477257,\n        avg: 17.792614214487433,\n        min: 15.792614214487433,\n        max: 19.792614214487433\n    },\n    {\n        time: 1571540077257,\n        avg: 21.284538095858057,\n        min: 19.284538095858057,\n        max: 23.284538095858057\n    },\n    {\n        time: 1571543677257,\n        avg: 19.217501705199364,\n        min: 17.217501705199364,\n        max: 21.217501705199364\n    },\n    {\n        time: 1571547277257,\n        avg: 19.609610071627134,\n        min: 17.609610071627134,\n        max: 21.609610071627134\n    },\n    {\n        time: 1571550877257,\n        avg: 17.484471872586905,\n        min: 15.484471872586905,\n        max: 19.484471872586905\n    },\n    {\n        time: 1571554477257,\n        avg: 18.394981057953636,\n        min: 16.394981057953636,\n        max: 20.394981057953636\n    },\n    {\n        time: 1571558077257,\n        avg: 19.75459934647529,\n        min: 17.75459934647529,\n        max: 21.75459934647529\n    },\n    {\n        time: 1571561677257,\n        avg: 18.346569989300125,\n        min: 16.346569989300125,\n        max: 20.346569989300125\n    },\n    {\n        time: 1571565277257,\n        avg: 19.406790076665473,\n        min: 17.406790076665473,\n        max: 21.406790076665473\n    },\n    {\n        time: 1571568877257,\n        avg: 19.090777952177135,\n        min: 17.090777952177135,\n        max: 21.090777952177135\n    },\n    {\n        time: 1571572477257,\n        avg: 20.42047378208593,\n        min: 18.42047378208593,\n        max: 22.42047378208593\n    },\n    {\n        time: 1571576077257,\n        avg: 19.697958079716912,\n        min: 17.697958079716912,\n        max: 21.697958079716912\n    },\n    {\n        time: 1571579677257,\n        avg: 20.900283805215437,\n        min: 18.900283805215437,\n        max: 22.900283805215437\n    },\n    {\n        time: 1571583277257,\n        avg: 18.578424045037504,\n        min: 16.578424045037504,\n        max: 20.578424045037504\n    },\n    {\n        time: 1571586877257,\n        avg: 19.371050673581667,\n        min: 17.371050673581667,\n        max: 21.371050673581667\n    },\n    {\n        time: 1571590477257,\n        avg: 18.945275837028067,\n        min: 16.945275837028067,\n        max: 20.945275837028067\n    },\n    {\n        time: 1571594077257,\n        avg: 20.25282200348416,\n        min: 18.25282200348416,\n        max: 22.25282200348416\n    },\n    {\n        time: 1571597677257,\n        avg: 20.277197710349267,\n        min: 18.277197710349267,\n        max: 22.277197710349267\n    },\n    {\n        time: 1571601277257,\n        avg: 18.669199662783626,\n        min: 16.669199662783626,\n        max: 20.669199662783626\n    },\n    {\n        time: 1571604877257,\n        avg: 17.953445291205973,\n        min: 15.953445291205973,\n        max: 19.953445291205973\n    },\n    {\n        time: 1571608477257,\n        avg: 19.796822736461525,\n        min: 17.796822736461525,\n        max: 21.796822736461525\n    },\n    {\n        time: 1571612077257,\n        avg: 18.97128108484187,\n        min: 16.97128108484187,\n        max: 20.97128108484187\n    },\n    {\n        time: 1571615677257,\n        avg: 17.057910031537396,\n        min: 15.057910031537396,\n        max: 19.057910031537396\n    },\n    {\n        time: 1571619277257,\n        avg: 18.347342810778656,\n        min: 16.347342810778656,\n        max: 20.347342810778656\n    },\n    {\n        time: 1571622877257,\n        avg: 21.65942004814898,\n        min: 19.65942004814898,\n        max: 23.65942004814898\n    },\n    {\n        time: 1571626477257,\n        avg: 18.324549861359465,\n        min: 16.324549861359465,\n        max: 20.324549861359465\n    },\n    {\n        time: 1571630077257,\n        avg: 18.133647317369334,\n        min: 16.133647317369334,\n        max: 20.133647317369334\n    },\n    {\n        time: 1571633677257,\n        avg: 21.29984131359615,\n        min: 19.29984131359615,\n        max: 23.29984131359615\n    },\n    {\n        time: 1571637277257,\n        avg: 21.978377280721894,\n        min: 19.978377280721894,\n        max: 23.978377280721894\n    },\n    {\n        time: 1571640877257,\n        avg: 21.37198876660552,\n        min: 19.37198876660552,\n        max: 23.37198876660552\n    },\n    {\n        time: 1571644477257,\n        avg: 21.69654966446444,\n        min: 19.69654966446444,\n        max: 23.69654966446444\n    },\n    {\n        time: 1571648077257,\n        avg: 21.14335726656426,\n        min: 19.14335726656426,\n        max: 23.14335726656426\n    },\n    {\n        time: 1571651677257,\n        avg: 21.85912016734993,\n        min: 19.85912016734993,\n        max: 23.85912016734993\n    },\n    {\n        time: 1571655277257,\n        avg: 17.135799744396945,\n        min: 15.135799744396945,\n        max: 19.135799744396945\n    },\n    {\n        time: 1571658877257,\n        avg: 17.849843522827857,\n        min: 15.849843522827857,\n        max: 19.849843522827857\n    },\n    {\n        time: 1571662477257,\n        avg: 20.43366295737064,\n        min: 18.43366295737064,\n        max: 22.43366295737064\n    },\n    {\n        time: 1571666077257,\n        avg: 18.825871973296355,\n        min: 16.825871973296355,\n        max: 20.825871973296355\n    },\n    {\n        time: 1571669677257,\n        avg: 20.363385420573664,\n        min: 18.363385420573664,\n        max: 22.363385420573664\n    },\n    {\n        time: 1571673277257,\n        avg: 17.388293794035526,\n        min: 15.388293794035526,\n        max: 19.388293794035526\n    },\n    {\n        time: 1571676877257,\n        avg: 20.26360231451924,\n        min: 18.26360231451924,\n        max: 22.26360231451924\n    },\n    {\n        time: 1571680477257,\n        avg: 17.899344447411487,\n        min: 15.899344447411487,\n        max: 19.899344447411487\n    },\n    {\n        time: 1571684077257,\n        avg: 20.406771513383966,\n        min: 18.406771513383966,\n        max: 22.406771513383966\n    },\n    {\n        time: 1571687677257,\n        avg: 17.677696249514813,\n        min: 15.677696249514813,\n        max: 19.677696249514813\n    },\n    {\n        time: 1571691277257,\n        avg: 19.392426707390687,\n        min: 17.392426707390687,\n        max: 21.392426707390687\n    },\n    {\n        time: 1571694877257,\n        avg: 18.774658565557942,\n        min: 16.774658565557942,\n        max: 20.774658565557942\n    },\n    {\n        time: 1571698477257,\n        avg: 21.575631494875914,\n        min: 19.575631494875914,\n        max: 23.575631494875914\n    },\n    {\n        time: 1571702077257,\n        avg: 20.446699978973978,\n        min: 18.446699978973978,\n        max: 22.446699978973978\n    },\n    {\n        time: 1571705677257,\n        avg: 18.66978183962011,\n        min: 16.66978183962011,\n        max: 20.66978183962011\n    },\n    {\n        time: 1571709277257,\n        avg: 19.51849913493708,\n        min: 17.51849913493708,\n        max: 21.51849913493708\n    },\n    {\n        time: 1571712877257,\n        avg: 18.64323181305076,\n        min: 16.64323181305076,\n        max: 20.64323181305076\n    },\n    {\n        time: 1571716477257,\n        avg: 20.50263262056208,\n        min: 18.50263262056208,\n        max: 22.50263262056208\n    }\n];\n\nexport default data;\n","import React, { useRef, useState, useLayoutEffect } from 'react';\nimport { IViewport } from '../../types';\nimport Graph from './Graph';\nimport data from '../../data/mockdata';\n\ntype GraphViewProps = {\n    currentOption: string;\n};\n\nconst GraphView: React.FC<GraphViewProps> = ({ currentOption }) => {\n    const [size, setSize] = useState<IViewport | null>(null);\n    const graphRef = useRef<HTMLDivElement>(null);\n    const updateSize = () => {\n        if (graphRef.current) {\n            let viewport = graphRef.current.getBoundingClientRect();\n            setSize({ width: viewport.width, height: viewport.height });\n        }\n    };\n\n    useLayoutEffect(() => {\n        if (graphRef.current) {\n            updateSize();\n        }\n        window.addEventListener('resize', updateSize);\n        return () => window.removeEventListener('resize', updateSize);\n    }, [graphRef.current]);\n\n    return (\n        <div ref={graphRef} className=\"graph-view\">\n            {size ? (\n                <>\n                    <div className=\"graph-view-row\">\n                        <Graph\n                            data={data}\n                            viewport={{\n                                width: (size.width - 50) / 3,\n                                height: (size.height - 100) / 2\n                            }}\n                            name=\"first\"\n                        />\n                        <Graph\n                            data={data.slice(30)}\n                            viewport={{\n                                width: (size.width - 50) / 3,\n                                height: (size.height - 100) / 2\n                            }}\n                            name=\"second\"\n                        />\n                        <Graph\n                            data={data.slice(20, 40)}\n                            viewport={{\n                                width: (size.width - 50) / 3,\n                                height: (size.height - 100) / 2\n                            }}\n                            name=\"third\"\n                        />\n                    </div>\n                    <div className=\"graph-view-row\">\n                        <Graph\n                            data={{\n                                zoneA: data,\n                                zoneB: data.slice(30).map(d => ({\n                                    ...d,\n                                    avg: d.avg + Math.random() * 5 - 3\n                                })),\n                                zoneC: data.slice(20, 40).map(d => ({\n                                    ...d,\n                                    avg: d.avg + Math.random() * 5 - 6\n                                }))\n                            }}\n                            control={{ shouldRenderLive: false }}\n                            viewport={{\n                                width: size.width - 10,\n                                height: (size.height - 100) / 2\n                            }}\n                            name=\"fourth\"\n                        />\n                    </div>\n                </>\n            ) : null}\n        </div>\n    );\n};\n\nexport default GraphView;\n","import React, { useContext } from 'react';\nimport NavigationContext from '../context/NavigationContext';\nimport * as MENU_OPTIONS from '../constants/MenuOptionConstants';\nimport DashboardView from './views/DashboardView';\nimport GraphView from './views/GraphView';\n\nconst Switch: React.FC = () => {\n    const { currentOption } = useContext(NavigationContext);\n\n    let component = null;\n    switch (currentOption) {\n        case MENU_OPTIONS.DASHBOARD:\n            component = <DashboardView />;\n            break;\n        case MENU_OPTIONS.TEMPERATURE:\n        case MENU_OPTIONS.MOISTURE:\n        case MENU_OPTIONS.LIGHT:\n            component = (\n                <GraphView key={currentOption} currentOption={currentOption} />\n            );\n            break;\n        default:\n            component = (\n                <div className=\"not-implemented\">\n                    <h1>404</h1>\n                    <p>Not implemented yet. Come later ;) </p>\n                </div>\n            );\n    }\n\n    return <div className=\"switch\">{component}</div>;\n};\n\nexport default Switch;\n","import React from 'react';\nimport Menu from './Menu';\nimport Switch from './Switch';\n\nconst Dashboard: React.FC = () => {\n    return (\n        <div className=\"dashboard\">\n            <Menu />\n            <Switch />\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React, { useState } from 'react';\nimport './main.scss';\nimport Dashboard from './components/Dashboard';\nimport NavigationContext from './context/NavigationContext';\nimport { DASHBOARD } from './constants/MenuOptionConstants';\n\nconst App: React.FC = () => {\n    const [navigation, setNavigation] = useState(DASHBOARD);\n\n    return (\n        <NavigationContext.Provider\n            value={{\n                currentOption: navigation,\n                setCurrentOption: s => {\n                    setNavigation(s);\n                }\n            }}\n        >\n            <Dashboard />\n        </NavigationContext.Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}